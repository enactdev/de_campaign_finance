# coding: utf-8
# Baseline generated by sqlacodegen mysql://de_user:de_pass@localhost/de_scrape

from sqlalchemy import BigInteger, Column, Date, DateTime, Enum, ForeignKey, Index, Boolean
from sqlalchemy import Float, Integer, Numeric, SmallInteger, String, Table, Text, Time
from sqlalchemy import desc, distinct, text, func


#from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import relationship, backref, column_property

from sqlalchemy.ext.hybrid import hybrid_property

from flask_security import UserMixin, RoleMixin

import datetime


from de_scrape import db


#Base = declarative_base()
#metadata = Base.metadata





class Role(db.Model, RoleMixin):
    __tablename__ = 'login_role'
    id = Column(Integer(), primary_key=True)
    name = Column(String(80), unique=True)
    description = Column(String(255))

    def __repr__(self):
        return "<Role(name='%s')>" % (
                                self.name)


# Define models
user_role = Table(
    'login_user_role', db.metadata,
    Column('user_id', Integer, ForeignKey('login_user.id'), primary_key=True),
    Column('role_id', Integer, ForeignKey('login_role.id'), primary_key=True))



# Differnece between Role and Group is that roles allow/deny access at the view layer while
# groups determine what content is seen and shared between users
"""

class Group(db.Model):
    id = Column(Integer(), primary_key=True)
    name = Column(String(80), unique=True)
    description = Column(String(255))

    def __repr__(self):
        return "<Group(name='%s')>" % (
                                self.name)
"""


class User(db.Model, UserMixin):
    __tablename__ = 'login_user'
    id = Column(Integer, primary_key=True)

    username = Column(String(255), unique=True)
    email = Column(String(255), unique=True)
    password = Column(String(255))
    active = Column('active', Boolean())
    #confirmed_at = Column(DateTime())

    last_login_at = Column(DateTime())
    current_login_at = Column(DateTime())
    last_login_ip = Column(String(16))
    current_login_ip = Column(String(16))
    login_count = Column(Integer)

    roles = relationship('Role', secondary=user_role,
                            backref=backref('users'))

    """
    groups = relationship('Group', secondary=groups_users,
                            backref=backref('users'))
    """

    def __repr__(self):
        return "<User(username='%s')>" % (
                                self.username)


    def is_active(self):
        return self.active







class DelinquentTaxpayer(db.Model):
    __tablename__ = 'delinquent_taxpayers'

    id = Column(Integer, primary_key=True)
    release_date = Column(Date, nullable=False)
    name = Column(String(128), nullable=False)
    amount = Column(Integer, nullable=False)
    address = Column(String(128), nullable=False)
    city = Column(String(64), nullable=False)
    state = Column(String(16), nullable=False)
    zipcode = Column(Integer, nullable=False)

    def __repr__(self):
        return "<DelinquentTaxpayer(name='%s')>" % (self.name)









class State(db.Model):
    __tablename__ = 'states'

    id = Column(Integer, primary_key=True)
    abbreviation = Column(String(2))
    abbr_lower = Column(String(2))
    state = Column(Text)



def return_candidate_filing_from_name_office(full_name, office):

    try:

        return_candidate_filing_from_name_office = CandidateFiling.query\
            .filter(CandidateFiling.full_name == full_name)\
            .filter(CandidateFiling.office == office)\
            .one()

    except Exception as e:

        return False

    return return_candidate_filing_from_name_office


def check_candidate_filing_exists_from_name_office(full_name, office):

    candidate = return_candidate_filing_from_name_office(full_name, office)

    if candidate is False:
        return False

    return True


class CandidateFiling(db.Model):
    __tablename__ = 'candidate_filing'

    id = Column(Integer, primary_key=True)

    in_general = Column(Integer, nullable=False, server_default=text("'0'"))

    candidate_id = Column(Integer, nullable=False, server_default=text("'0'"), index=True)

    full_name = Column(String(255), nullable=False)
    office = Column(String(128), nullable=False)
    county = Column(String(2), nullable=False)
    party = Column(String(32), nullable=False)
    address = Column(String(255), nullable=False)
    mail_address = Column(String(255), nullable=False)
    email = Column(String(128), nullable=False)
    url = Column(String(128), nullable=False)
    phone = Column(String(20), nullable=False)
    date_filed = Column(DateTime)
    date_found = Column(DateTime)
    page_found = Column(String(16), nullable=False)


    def __repr__(self):
        return "<CandidateFiling(full_name='%s')>" % (self.full_name)


class TestProbablePeopleCleaner(db.Model):
    __tablename__ = 'test_probable_people_cleaner'

    id = Column(Integer, primary_key=True)

    name_type = Column(String(128), server_default=text(""), nullable=False)

    original_name  = Column(Text, server_default=text(""), nullable=False)



    PrefixMarital = Column(String(128), server_default=text(""), nullable=False)
    PrefixOther = Column(String(128), server_default=text(""), nullable=False)

    Nickname = Column(String(128), server_default=text(""), nullable=False)
    AKA = Column(String(128), server_default=text(""), nullable=False)


    FirstInitial = Column(String(128), server_default=text(""), nullable=False)
    GivenName = Column(String(128), server_default=text(""), nullable=False)
    MiddleInitial = Column(String(128), server_default=text(""), nullable=False)
    MiddleName = Column(String(128), server_default=text(""), nullable=False)

    LastInitial = Column(String(128), server_default=text(""), nullable=False)
    Surname = Column(String(128), server_default=text(""), nullable=False)
    SuffixGenerational = Column(String(128), server_default=text(""), nullable=False)

    SuffixOther = Column(String(128), server_default=text(""), nullable=False)


    And = Column(String(128), server_default=text(""), nullable=False)
    SecondPrefixMarital = Column(String(128), server_default=text(""), nullable=False)
    SecondPrefixOther = Column(String(128), server_default=text(""), nullable=False)

    SecondNickname = Column(String(128), server_default=text(""), nullable=False)
    SecondFirstInitial = Column(String(128), server_default=text(""), nullable=False)


    SecondGivenName = Column(String(128), server_default=text(""), nullable=False)
    SecondMiddleInitial = Column(String(128), server_default=text(""), nullable=False)
    SecondMiddleName = Column(String(128), server_default=text(""), nullable=False)

    SecondLastInitial = Column(String(128), server_default=text(""), nullable=False)
    SecondSurname = Column(String(128), server_default=text(""), nullable=False)

    SecondSuffixGenerational = Column(String(128), server_default=text(""), nullable=False)
    SecondSuffixOther = Column(String(128), server_default=text(""), nullable=False)


    CorporationName = Column(String(128), server_default=text(""), nullable=False)

    ShortForm = Column(String(128), server_default=text(""), nullable=False)
    OtherShortForm = Column(String(128), server_default=text(""), nullable=False)


    ProxyFor = Column(String(128), server_default=text(""), nullable=False)
    ProxiedCorporationNameBranchType = Column(String(128), server_default=text(""), nullable=False)



    OtherCorporationName = Column(String(128), server_default=text(""), nullable=False)


    CorporationNameAndCompany = Column(String(128), server_default=text(""), nullable=False)

    CorporationNameOrganization = Column(String(128), server_default=text(""), nullable=False)
    CorporationNameBranchIdentifier = Column(String(128), server_default=text(""), nullable=False)
    CorporationNameBranchType = Column(String(128), server_default=text(""), nullable=False)
    CorporationCommitteeType = Column(String(128), server_default=text(""), nullable=False)
    CorporationLegalType = Column(String(128), server_default=text(""), nullable=False)
    #Recipient = Column(String(128), server_default=text(""), nullable=False)
    #Recipient = Column(String(128), server_default=text(""), nullable=False)
    #Recipient = Column(String(128), server_default=text(""), nullable=False)
    #Recipient = Column(String(128), server_default=text(""), nullable=False)


    SecondCorporationName = Column(String(128), server_default=text(""), nullable=False)
    SecondCorporationNameOrganization = Column(String(128), server_default=text(""), nullable=False)
    SecondCorporationNameBranchIdentifier = Column(String(128), server_default=text(""), nullable=False)
    SecondCorporationNameBranchType = Column(String(128), server_default=text(""), nullable=False)
    SecondCorporationCommitteeType = Column(String(128), server_default=text(""), nullable=False)
    SecondCorporationLegalType = Column(String(128), server_default=text(""), nullable=False)





class TestUsAddressCleaner(db.Model):
    __tablename__ = 'test_us_address_cleaner'

    id = Column(Integer, primary_key=True)

    address_type = Column(String(128), server_default=text(""), nullable=False)

    original_address  = Column(Text, server_default=text(""), nullable=False)

    Recipient = Column(String(128), server_default=text(""), nullable=False)

    AddressNumberPrefix = Column(String(128), server_default=text(""), nullable=False)
    AddressNumber = Column(String(128), server_default=text(""), nullable=False)
    AddressNumberSuffix = Column(String(128), server_default=text(""), nullable=False)

    CornerOf = Column(String(128), server_default=text(""), nullable=False)


    StreetNamePreDirectional = Column(String(128), server_default=text(""), nullable=False)

    StreetNamePreType = Column(String(128), server_default=text(""), nullable=False)

    StreetNamePreModifier = Column(String(128), server_default=text(""), nullable=False)

    StreetName = Column(String(128), server_default=text(""), nullable=False)
    StreetNamePostModifier = Column(String(128), server_default=text(""), nullable=False)
    StreetNamePostType = Column(String(128), server_default=text(""), nullable=False)
    StreetNamePostDirectional = Column(String(128), server_default=text(""), nullable=False)


    SubaddressType = Column(String(128), server_default=text(""), nullable=False)
    SubaddressIdentifier = Column(String(128), server_default=text(""), nullable=False)

    IntersectionSeparator = Column(String(128), server_default=text(""), nullable=False)

    SecondStreetName = Column(String(128), server_default=text(""), nullable=False)
    SecondStreetNamePostModifier = Column(String(128), server_default=text(""), nullable=False)
    SecondStreetNamePostType = Column(String(128), server_default=text(""), nullable=False)
    SecondStreetNamePostDirectional = Column(String(128), server_default=text(""), nullable=False)

    BuildingName = Column(String(128), server_default=text(""), nullable=False)

    LandmarkName = Column(String(128), server_default=text(""), nullable=False)


    OccupancyType = Column(String(128), server_default=text(""), nullable=False)
    OccupancyIdentifier = Column(String(128), server_default=text(""), nullable=False)

    USPSBoxGroupType = Column(String(128), server_default=text(""), nullable=False)
    USPSBoxGroupID = Column(String(128), server_default=text(""), nullable=False)
    USPSBoxType = Column(String(128), server_default=text(""), nullable=False)
    USPSBoxID = Column(String(128), server_default=text(""), nullable=False)

    PlaceName = Column(String(128), server_default=text(""), nullable=False)
    StateName = Column(String(128), server_default=text(""), nullable=False)
    ZipCode = Column(String(128), server_default=text(""), nullable=False)

    CountryName = Column(String(128), server_default=text(""), nullable=False)

    NotAddress = Column(String(128), server_default=text(""), nullable=False)




"""

SELECT DISTINCT(AddressNumberSuffix), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY AddressNumberSuffix ORDER BY numm DESC


SELECT DISTINCT(StreetNamePreDirectional), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY StreetNamePreDirectional ORDER BY numm DESC


SELECT DISTINCT(StreetNamePreType), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY StreetNamePreType ORDER BY numm DESC


SELECT DISTINCT(StreetNamePostModifier), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY StreetNamePostModifier ORDER BY numm DESC



!!!!
SELECT DISTINCT(StreetNamePostType), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY StreetNamePostType ORDER BY numm DESC


SELECT DISTINCT(SecondStreetNamePostDirectional), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY SecondStreetNamePostDirectional ORDER BY numm DESC


SELECT DISTINCT(SubaddressType), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY SubaddressType ORDER BY numm DESC


SELECT DISTINCT(SubaddressIdentifier), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY SubaddressIdentifier ORDER BY numm DESC


SELECT DISTINCT(IntersectionSeparator), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY IntersectionSeparator ORDER BY numm DESC


SELECT DISTINCT(SecondStreetName), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY SecondStreetName ORDER BY numm DESC


SELECT DISTINCT(SecondStreetNamePostType), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY SecondStreetNamePostType ORDER BY numm DESC


SELECT DISTINCT(SecondStreetNamePostDirectional), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY SecondStreetNamePostDirectional ORDER BY numm DESC

!!! Some weird ones
SELECT DISTINCT(OccupancyType), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY OccupancyType ORDER BY numm DESC

!!! Look at details later
SELECT DISTINCT(OccupancyIdentifier), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY OccupancyIdentifier ORDER BY numm DESC


SELECT DISTINCT(USPSBoxType), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY USPSBoxType ORDER BY numm DESC


SELECT DISTINCT(USPSBoxID), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY USPSBoxID ORDER BY numm DESC


!!! Look at details later
SELECT DISTINCT(StateName), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY StateName ORDER BY numm DESC







SELECT DISTINCT(StreetNamePreModifier), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY StreetNamePreModifier ORDER BY numm DESC


SELECT DISTINCT(USPSBoxGroupType), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY USPSBoxGroupType ORDER BY numm DESC


SELECT DISTINCT(NotAddress), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY NotAddress ORDER BY numm DESC






SELECT DISTINCT(AddressNumberPrefix), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY AddressNumberPrefix ORDER BY numm DESC


SELECT DISTINCT(XXXXXXXXXXXXX), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY XXXXXXXXXXXXXX ORDER BY numm DESC


SELECT DISTINCT(XXXXXXXXXXXXX), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY XXXXXXXXXXXXXX ORDER BY numm DESC


SELECT DISTINCT(XXXXXXXXXXXXX), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY XXXXXXXXXXXXXX ORDER BY numm DESC








# Submit bug report:
SELECT * FROM `test_us_address_cleaner` WHERE StreetNamePreType != '' 
SELECT * FROM `test_us_address_cleaner` WHERE StreetNamePreDirectional in ('MT', 'FLINT') 
SELECT * FROM `test_us_address_cleaner` WHERE CornerOf != '' 





# Show weird addresses
SELECT * FROM `test_us_address_cleaner` WHERE StateName = '' 
    AND original_address != '' ORDER BY `test_us_address_cleaner`.`original_address` DESC 



SELECT * FROM `test_us_address_cleaner` WHERE StreetNamePreDirectional in ('R', 'EN', 'O')





SELECT * FROM `test_us_address_cleaner` WHERE original_address = ''


SELECT * FROM `test_us_address_cleaner` WHERE StreetNamePreType != '' 



SELECT * FROM `test_us_address_cleaner` WHERE StreetNamePreType != '' 

SELECT * FROM `test_us_address_cleaner` WHERE SubaddressType != '' 

SELECT * FROM `test_us_address_cleaner` WHERE SubaddressIdentifier != '' 

SELECT * FROM `test_us_address_cleaner` WHERE IntersectionSeparator != '' 

SELECT * FROM `test_us_address_cleaner` WHERE SecondStreetName != '' 

SELECT * FROM `test_us_address_cleaner` WHERE BuildingName != '' 

SELECT * FROM `test_us_address_cleaner` WHERE LandmarkName != '' 

SELECT * FROM `test_us_address_cleaner` WHERE USPSBoxGroupType != ''






SELECT * FROM `test_us_address_cleaner` WHERE StreetNamePostDirectional in ('OLMSTED', '202-7') 


SELECT * FROM `test_us_address_cleaner` WHERE OccupancyType in ('UTG') 


-- ok, just testing -- SELECT * FROM `test_us_address_cleaner` WHERE OccupancyIdentifier in ('3124') 

SELECT * FROM `test_us_address_cleaner` WHERE OccupancyIdentifier LIKE '#%'



# Lots of the same post office box are donating! 
SELECT DISTINCT(USPSBoxID), COUNT(*) AS numm FROM test_us_address_cleaner GROUP BY USPSBoxID ORDER BY numm DESC



"""