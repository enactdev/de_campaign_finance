# coding: utf-8
# Baseline generated by sqlacodegen mysql://mitty_user:mitty_pass@localhost/mitty_apps_flask

from sqlalchemy import BigInteger, Column, Date, DateTime, Enum, ForeignKey, Index
from sqlalchemy import Float, Integer, Numeric, SmallInteger, String, Table, Text, Time
from sqlalchemy import desc, distinct, text, func


#from sqlalchemy.ext.declarative import declarative_base

from sqlalchemy.orm import relationship, backref, column_property

from sqlalchemy.ext.hybrid import hybrid_property


from datetime import date
from time import time

import re

from de_scrape import db

from de_scrape.models import *


#from de_scrape.models import Student




def return_donation_commitee_id_from_name(name):

    try:

        committee = DePoliticalDonationCommittee.query\
            .filter(DePoliticalDonationCommittee.committee_name == name).one()

    except Exception as e:

        committee = DePoliticalDonationCommittee()
        committee.committee_name = name

        db.session.add(committee)        
        db.session.commit()

    return committee.id


def return_contribution_type_id_from_name(name):

    try:

        contribution_type = DePoliticalDonationContributionType.query\
            .filter(DePoliticalDonationContributionType.type_name == name).one()

    except Exception as e:

        contribution_type = DePoliticalDonationContributionType()
        contribution_type.type_name = name

        db.session.add(contribution_type)        
        db.session.commit()

    return contribution_type.id


def return_contributor_type_id_from_name(name):

    try:

        contributor_type = DePoliticalDonationContributorType.query\
            .filter(DePoliticalDonationContributorType.type_name == name).one()

    except Exception as e:

        contributor_type = DePoliticalDonationContributorType()
        contributor_type.type_name = name

        db.session.add(contributor_type)        
        db.session.commit()

    return contributor_type.id


def return_filing_period_id_from_name(name):

    try:

        filing_period = DePoliticalDonationFilingPeriod.query\
            .filter(DePoliticalDonationFilingPeriod.period_name == name).one()

    except Exception as e:

        filing_period = DePoliticalDonationFilingPeriod()
        filing_period.period_name = name

        db.session.add(filing_period)        
        db.session.commit()

    return filing_period.id


def return_employer_name_id_from_name(name):

    try:

        employer_name = DePoliticalDonationEmployerName.query\
            .filter(DePoliticalDonationEmployerName.employer_name == name).one()

    except Exception as e:

        employer_name = DePoliticalDonationEmployerName()
        employer_name.employer_name = name

        db.session.add(employer_name)        
        db.session.commit()

    return employer_name.id


def return_employer_occupation_id_from_name(name):

    try:

        occupation = DePoliticalDonationEmployerOccupation.query\
            .filter(DePoliticalDonationEmployerOccupation.occupation_name == name).one()

    except Exception as e:

        occupation = DePoliticalDonationEmployerOccupation()
        occupation.occupation_name = name

        db.session.add(occupation)        
        db.session.commit()

    return occupation.id


def return_office_id_from_name_and_district(name, district):

    try:

        office = DePoliticalDonationElectionOffice.query\
            .filter(DePoliticalDonationElectionOffice.office_name == name)\
            .filter(DePoliticalDonationElectionOffice.office_district == district).one()

    except Exception as e:

        office = DePoliticalDonationElectionOffice()
        office.office_name = name
        office.office_district = district

        db.session.add(office)        
        db.session.commit()

    return office.id






class DeElectionDBCache:

    census_last_names = {}    
    state_abbrs = {}

    donation_committees = {}
    contribution_types = {}
    contributor_types = {}
    election_offices  = {}
    employer_names  = {}
    employer_occupations  = {}

    def load_cache(self):

        self.census_last_names = {}
        census_last_names = CensusLastNames.query.filter(CensusLastNames.count > 5000)
        for c in census_last_names:
            index = c.last_name.upper()
            self.census_last_names[index] = c.id

        self.state_abbrs = {}
        state_abbrs = State.query
        for s in state_abbrs:
            index = s.abbreviation.upper()
            self.state_abbrs[index] = s.id



        self.donation_committees = {}
        committees = DePoliticalDonationCommittee.query
        for c in committees:
            index = ''.join(re.findall('([a-z0-9])', c.committee_name.lower()))
            self.donation_committees[index] = c.id

        self.contribution_types = {}
        contribution_types = DePoliticalDonationContributionType.query
        for c in contribution_types:
            index = ''.join(re.findall('([a-z0-9])', c.type_name.lower()))
            self.contribution_types[index] = c.id


        self.contributor_types = {}
        contributor_types = DePoliticalDonationContributorType.query
        for c in contributor_types:
            index = ''.join(re.findall('([a-z0-9])', c.type_name.lower()))
            self.contributor_types[index] = c.id


        self.election_offices = {}
        election_offices = DePoliticalDonationFilingPeriod.query
        for c in election_offices:
            index = ''.join(re.findall('([a-z0-9])', c.period_name.lower()))
            self.election_offices[index] = c.id


        self.employer_names = {}
        employer_names = DePoliticalDonationEmployerName.query
        for c in employer_names:
            index = ''.join(re.findall('([a-z0-9])', c.employer_name.lower()))
            self.employer_names[index] = c.id


        self.employer_occupations = {}
        employer_occupations = DePoliticalDonationEmployerOccupation.query
        for c in employer_occupations:
            index = ''.join(re.findall('([a-z0-9])', c.occupation_name.lower()))
            self.employer_occupations[index] = c.id


        self.offices = {}
        offices = DePoliticalDonationElectionOffice.query
        for c in offices:
            index = ''.join(re.findall('([a-z0-9])', c.office_name.lower()))
            if index not in self.offices:
                self.offices[index] = {}
            self.offices[index][c.office_district] = c.id


    def return_census_last_name_id_from_name(self, name):
        index = name.upper()
        if index not in self.census_last_names:
            return 0
        return self.census_last_names[index]


    def return_state_id_from_name(self, name):
        index = name.upper()
        if index not in self.state_abbrs:
            return 0
        return self.state_abbrs[index]




    def return_donation_commitee_id_from_name(self, name):
        index = ''.join(re.findall('([a-z0-9])', name.lower()))
        if index not in self.donation_committees:
            self.donation_committees[index] = return_donation_commitee_id_from_name(name)
        return self.donation_committees[index]


    def return_contribution_type_id_from_name(self, name):
        index = ''.join(re.findall('([a-z0-9])', name.lower()))
        if index not in self.contribution_types:
            self.contribution_types[index] = return_contribution_type_id_from_name(name)
        return self.contribution_types[index]


    def return_contributor_type_id_from_name(self, name):
        index = ''.join(re.findall('([a-z0-9])', name.lower()))
        if index not in self.contributor_types:
            self.contributor_types[index] = return_contributor_type_id_from_name(name)
        return self.contributor_types[index]


    def return_filing_period_id_from_name(self, name):
        index = ''.join(re.findall('([a-z0-9])', name.lower()))
        if index not in self.election_offices:
            self.election_offices[index] = return_filing_period_id_from_name(name)
        return self.election_offices[index]


    def return_employer_name_id_from_name(self, name):
        index = ''.join(re.findall('([a-z0-9])', name.lower()))
        if index not in self.employer_names:
            self.employer_names[index] = return_employer_name_id_from_name(name)
        return self.employer_names[index]


    def return_employer_occupation_id_from_name(self, name):
        index = ''.join(re.findall('([a-z0-9])', name.lower()))
        if index not in self.employer_occupations:
            self.employer_occupations[index] = return_employer_occupation_id_from_name(name)
        return self.employer_occupations[index]


    def return_office_id_from_name_and_district(self, name, district):
        index = ''.join(re.findall('([a-z0-9])', name.lower()))
        if index not in self.offices:
            self.offices[index] = {}
            self.offices[index][district] = return_office_id_from_name_and_district(name, district)
        elif district not in self.offices[index]:
            self.offices[index][district] = return_office_id_from_name_and_district(name, district)
        return self.offices[index][district]






class DePoliticalDonationCommittee(db.Model):
    __tablename__ = 'de_political_donation_committee'

    id = Column(Integer, primary_key=True)
    committee_name = Column(String(64), nullable=False)
    committee_slug = Column(String(32), nullable=False, server_default='')    
    committee_description = Column(Text, server_default='')

    def __repr__(self):
        return "<DePoliticalDonationCommittee(committee_name='%s')>" % (self.committee_name)

    #@hybrid_property
    def number_of_donations(self):
        return len(self.donations)


    #@hybrid_property
    def number_of_donators(self):
        contributor_id_list = [d.contributor_id for d in self.donations]
        contributor_id_set = set(contributor_id_list)
        return len(contributor_id_set)


    #@hybrid_property
    def donation_total(self):
        return sum([d.donation_amount for d in self.donations])





class DePoliticalDonationContributionType(db.Model):
    __tablename__ = 'de_political_donation_contribution_type'

    id = Column(Integer, primary_key=True)
    type_name = Column(String(64), nullable=False)
    type_slug = Column(String(32), nullable=False, server_default='')    
    type_description = Column(Text, server_default='')

    def __repr__(self):
        return "<DePoliticalDonationContributionType(type_name='%s')>" % (self.type_name)


class DePoliticalDonationContributor(db.Model):
    __tablename__ = 'de_political_donation_contributor'
    #__table_args__ = (
    #    Index('city', 'city', 'state'),
    #    Index('is_person', 'is_person', 'is_business')
    #)

    id = Column(Integer, primary_key=True)
    full_name = Column(String(128), nullable=False, server_default='')
    full_address = Column(String(255), nullable=False, server_default='')
    name_prefix = Column(String(64), nullable=False, server_default='')
    name_first = Column(String(64), nullable=False, server_default='')
    name_middle = Column(String(64), nullable=False, server_default='')
    name_last = Column(String(64), nullable=False, server_default='')
    name_suffix = Column(String(64), nullable=False, server_default='')
    addr1 = Column(String(128), nullable=False, server_default='')
    addr2 = Column(String(128), nullable=False, server_default='')
    addr3 = Column(String(128), nullable=False, server_default='')
    city = Column(String(64), nullable=False)
    state = Column(String(32), nullable=False)
    zipcode = Column(String(16), nullable=False, index=True)
    is_person = Column(SmallInteger, nullable=False, server_default='0')
    is_business = Column(SmallInteger, nullable=False, server_default='0')

    def __repr__(self):
        return "<DePoliticalDonationContributor(full_name='%s')>" % (self.full_name)


class DePoliticalDonationContributorType(db.Model):
    __tablename__ = 'de_political_donation_contributor_type'

    id = Column(Integer, primary_key=True)
    type_name = Column(String(64), nullable=False)
    type_slug = Column(String(32), nullable=False, server_default='')    
    type_description = Column(Text, server_default='')

    def __repr__(self):
        return "<DePoliticalDonationContributorType(type_name='%s')>" % (self.type_name)


class DePoliticalDonationElectionOffice(db.Model):
    __tablename__ = 'de_political_donation_election_office'

    id = Column(Integer, primary_key=True)
    office_name = Column(String(64), nullable=False)
    office_area = Column(String(64), nullable=False, server_default='')
    office_district = Column(Integer, nullable=False, server_default='0')
    office_description = Column(Text, server_default='')

    def __repr__(self):
        return "<DePoliticalDonationElectionOffice(office_name='%s')>" % (self.office_name)


class DePoliticalDonationFilingPeriod(db.Model):
    __tablename__ = 'de_political_donation_filing_period'

    id = Column(Integer, primary_key=True)
    period_name = Column(String(64), nullable=False)
    period_slug = Column(String(32), nullable=False, server_default='')    
    period_description = Column(Text, server_default='')

    def __repr__(self):
        return "<DePoliticalDonationFilingPeriod(period_name='%s')>" % (self.period_name)


class DePoliticalDonationEmployerName(db.Model):
    __tablename__ = 'de_political_donation_employer_name'

    id = Column(Integer, primary_key=True)
    employer_name = Column(String(64), nullable=False)
    employer_slug = Column(String(32), nullable=False, server_default='')    
    employer_description = Column(Text, server_default='')

    def __repr__(self):
        return "<DePoliticalDonationEmployerName(employer_name='%s')>" % (self.employer_name)


class DePoliticalDonationEmployerOccupation(db.Model):
    __tablename__ = 'de_political_donation_employer_occupation'

    id = Column(Integer, primary_key=True)
    occupation_name = Column(String(64), nullable=False)
    occupation_slug = Column(String(32), nullable=False, server_default='')    
    occupation_description = Column(Text, server_default='')

    def __repr__(self):
        return "<DePoliticalDonationEmployerOccupation(occupation_name='%s')>" % (self.occupation_name)



class DePoliticalDonation(db.Model):
    __tablename__ = 'de_political_donation'

    id = Column(Integer, primary_key=True)

    #contributor_id = Column(Integer, nullable=False)
    contributor_id = Column(Integer, ForeignKey(DePoliticalDonationContributor.id), nullable=False, index=True)
    contributor = relationship(DePoliticalDonationContributor, backref=backref('donations', order_by=id))

    #contributor_type_id = Column(Integer, nullable=False)
    contributor_type_id = Column(Integer, ForeignKey(DePoliticalDonationContributorType.id), nullable=False, index=True)
    contributor_type = relationship(DePoliticalDonationContributorType, backref=backref('donations', order_by=id))

    #contribution_type_id = Column(Integer, nullable=False)
    contribution_type_id = Column(Integer, ForeignKey(DePoliticalDonationContributionType.id), nullable=False, index=True)
    contribution_type = relationship(DePoliticalDonationContributionType, backref=backref('donations', order_by=id))

    #committee_id = Column(Integer, nullable=False)
    committee_id = Column(Integer, ForeignKey(DePoliticalDonationCommittee.id), nullable=False, index=True)
    committee = relationship(DePoliticalDonationCommittee, backref=backref('donations', order_by=id))

    #filing_period_id = Column(Integer, nullable=False)
    filing_period_id = Column(Integer, ForeignKey(DePoliticalDonationFilingPeriod.id), nullable=False, index=True)
    filing_period = relationship(DePoliticalDonationFilingPeriod, backref=backref('donations', order_by=id))

    employer_name_id = Column(Integer, ForeignKey(DePoliticalDonationEmployerName.id), nullable=False, index=True)
    employer_name = relationship(DePoliticalDonationEmployerName, backref=backref('donations', order_by=id))

    employer_occupation_id = Column(Integer, ForeignKey(DePoliticalDonationEmployerOccupation.id), nullable=False, index=True)
    employer_occupation = relationship(DePoliticalDonationEmployerOccupation, backref=backref('donations', order_by=id))

    # Not linking:
    # DePoliticalDonationElectionOffice

    donation_date = Column(DateTime, nullable=False)
    donation_amount = Column(Numeric(10, 2), nullable=False)
    provided_name = Column(String(128), nullable=False)
    provided_address = Column(String(128), nullable=False)
    is_fixed_asset = Column(SmallInteger, nullable=False)

    def __repr__(self):
        return "<DePoliticalDonation(contributor_id='%s')>" % (self.contributor_id)


